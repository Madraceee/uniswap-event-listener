@using Nethereum.Web3;
@using Nethereum.ABI.FunctionEncoding.Attributes;
@using Nethereum.Contracts.CQS;
@using Nethereum.Util;
@using Nethereum.Web3.Accounts;
@using Nethereum.Hex.HexConvertors.Extensions;
@using Nethereum.Contracts;
@using Nethereum.Contracts.Extensions;
@using System.Numerics;
@using Nethereum.RPC.Eth.DTOs;
@using System.Timers;


@inject HttpClient Http
@inject IJSRuntime JSRuntime


<div class="content">
    <div class="heading">
        <h4>We are listening to events of Uniswap contract 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984 </h4>
        <a href="https://etherscan.io/address/0x1f9840a85d5af5bf1d1762f925bdaddc4201f984#events">Uniswap Etherscan page</a>
    </div>
    <ul id="events" class="event-list">
        <li>
            <div class="event-container">
                
            </div>
        </li>        
    </ul>
</div>

@code{
    string alchemyURL;
    string address;


    
    protected override void OnAfterRender (bool firstRender)
    {
        if(firstRender)
        {

            alchemyURL = "https://eth-mainnet.g.alchemy.com/v2/QBiNQmjZhQ_8TXUyErSdPEUnc4-8oBXg";
            <!-- Uniswap smart contract address -->
            address = "0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984";
            initUI(alchemyURL,address);

            Timer t = new Timer(18000);
            t.Elapsed += updateUi;
            t.Start();
            

        }
        
    }

    [Event("Transfer")]
    public class TransferEventDTO : IEventDTO
    {     

        [Nethereum.ABI.FunctionEncoding.Attributes.Parameter("address", "from", 1, true)]
        public string From { get; set; }

        [Nethereum.ABI.FunctionEncoding.Attributes.Parameter("address", "to", 2, true)]
        public string To { get; set; }

        [Nethereum.ABI.FunctionEncoding.Attributes.Parameter("uint256", "_value", 3, false)]
        public BigInteger Value { get; set; }
    }


    
    async void initUI (string alchemyURL,string address)
    {

        var web3 = new Web3(alchemyURL);
        var eventListner= web3.Eth.GetEvent<TransferEventDTO>(address);  

        var block = await web3.Eth.Blocks.GetBlockNumber.SendRequestAsync();
        var currentBlock = (int)block.Value;
		currentBlock = currentBlock-1000;		
		var fromBlock = new Nethereum.Hex.HexTypes.HexBigInteger(currentBlock);

        var eventFilter = eventListner.CreateFilterInput(
            fromBlock: new BlockParameter(fromBlock)
        );
        var eventsOutput = await eventListner.GetAllChangesAsync(eventFilter);

        await JSRuntime.InvokeVoidAsync(identifier:"initiateUI",eventsOutput);
        StateHasChanged();
    }

    

    async void updateUi (Object? sender, ElapsedEventArgs eventArgs)
    {
        var web3 = new Web3(alchemyURL);
        var eventListner= web3.Eth.GetEvent<TransferEventDTO>(address);

        
        var block = await web3.Eth.Blocks.GetBlockNumber.SendRequestAsync();
        var currentBlock = (int)block.Value;
        currentBlock = currentBlock-1;		
        var fromBlock = new Nethereum.Hex.HexTypes.HexBigInteger(currentBlock);
        
        var eventFilter = eventListner.CreateFilterInput(
            fromBlock: new BlockParameter(fromBlock)
        );

        var eventFilterChanges = await eventListner.CreateFilterAsync(eventFilter);
        var eventsOutput = await eventListner.GetAllChangesAsync(eventFilterChanges);
        await JSRuntime.InvokeVoidAsync(identifier:"updateUI",eventsOutput);        
        
    }
}